{"version":3,"sources":["webpack:///./static/js/app/src/price/roomEntry.js","webpack:///./static/js/app/src/price/accommodationPriceList.js","webpack:///./static/js/app/src/common/virtualDOM.js"],"names":[],"mappings":";;;;;0CAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;AACA;AACA,sCAAqC;AACrC,8BAA6B;AAC7B,+BAA8B;AAC9B,mCAAkC;AAClC,mCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,wBAAuB,QAAQ;AAC/B,uEAAsE;AACtE,8BAA6B;AAC7B,8BAA6B;AAC7B;AACA;AACA,sCAAqC;AACrC;AACA,oCAAmC;AACnC,+BAA8B;AAC9B,+BAA8B;AAC9B;AACA;AACA,gDAA+C;AAC/C;AACA,qCAAoC,8BAA8B;AAClE,qCAAoC,4BAA4B;AAChE;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;ACjEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAuC,SAAS;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,2CAA0C,SAAS;AACnD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA,qBAAoB;AACpB;AACA;;AAEA;AACA,qBAAoB;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA,uCAAsC,SAAS;AAC/C;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,gCAA+B,qCAAqC;AACpE;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,yCAAyC;AACxE;AACA;AACA;AACA;AACA,MAAK;AACL,4BAA2B,qCAAqC;AAChE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA4B;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,+BAA8B;AAC9B,oEAAmE;AACnE;AACA;AACA;AACA,UAAS,4BAA4B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"price/roomEntry.js","sourcesContent":["require(\"laydate\");\r\nvar header = require(\"header\");\r\nvar leftMenu = require(\"leftMenu\");\r\nvar accommodationPriceList = require(\"accommodationPriceList\");\r\nvar util = require(\"util\");\r\n\r\n\r\nheader.showHeader();\r\nleftMenu.showLeftMenu();\r\nutil.mainContainer();\r\n$(\".campName\").html(localStorage.getItem(\"campName\"));\r\naccommodationPriceList.getAccommodationPriceList(new Date());\r\nlaydate({\r\n    elem: '#dateInput'\r\n});\r\nlaydate.skin('danlan');\r\nevents = {\r\n    \"resize window\": util.mainContainer\r\n};\r\nutil.bindDomAction(events);\r\nalert(\"hello\");\r\n\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/js/app/src/price/roomEntry.js\n ** module id = 0\n ** module chunks = 1\n **/","var AJAXService = require(\"AJAXService\");\r\nvar vD = require(\"virtualDOM\");\r\nvar util = require(\"util\");\r\nvar accommodationPriceList = {\r\n    getAccommodationPriceList: function(startDate){\r\n        $.ajax({\r\n            url: AJAXService.getUrl(\"getAccommodationPriceList\"),\r\n            data: {\r\n                campId: localStorage.getItem(\"campId\"),\r\n                startDate: util.dateFormat(startDate),\r\n                endDate: util.dateFormat(new Date(startDate.setDate(startDate.getDate() + 6)))\r\n            },\r\n            dataFilter: function (result) {\r\n                return AJAXService.sessionValidate(result);\r\n            },\r\n            success: function(result){\r\n                accommodationPriceList.createEl(result);\r\n            }\r\n        })\r\n    },\r\n    createEl: function(result){\r\n        var week = [\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"];\r\n        var table = vD.El(\"table\", {}, [\r\n            vD.El(\"thead\", {}, [\r\n                vD.El(\"tr\", {}, [\r\n                    vD.El(\"th\", {}, [\"房型\"]),\r\n                    vD.El(\"th\", {}, [\"价格类型\"])\r\n                ])\r\n            ])\r\n        ]);\r\n        var dateArray = [];\r\n        for (var name in result.data) {\r\n            $.each(result.data[name], function(index, element){\r\n                dateArray.push(new Date(element.date));\r\n            })\r\n        }\r\n        for (var i = 0;  i < 7; i++) {\r\n            table.children[0].children[0].children.push(vD.El(\"th\", {}, [\r\n                vD.El(\"p\", {}, [dateArray[i].toLocaleDateString().substring(5).replace(\"/\", \"-\")]),\r\n                vD.El(\"p\", {}, [new Date().toDateString() ==  dateArray[i].toDateString() ? \"今天\" : week[dateArray[i].getDay()]])\r\n            ]));\r\n        }\r\n        var tbody = vD.El('tbody', {}, []);\r\n        for (var name in result.data) {\r\n            var tr = vD.El(\"tr\", {}, [\r\n                vD.El(\"td\", {} , [result.data[name][0].name]),\r\n                vD.El(\"td\", {} , [\"零售价\"])\r\n            ]);\r\n            $.each(result.data[name], function(index, element){\r\n                tr.children.push(vD.El(\"td\", {}, [\r\n                    element.salePrice / 100,\r\n                    vD.El(\"input\", {type: \"hidden\", class: \"date\"}, [element.date]),\r\n                    vD.El(\"input\", {type: \"hidden\", class: \"id\"}, [element.id])\r\n                ]));\r\n            });\r\n            tbody.children.push(tr);\r\n        }\r\n        table.children.push(tbody);\r\n        this.renderEl(table);\r\n    },\r\n    renderEl: function(el){\r\n        var dom = el.render();\r\n        $(\".priceGrid\").append(dom);\r\n    }\r\n};\r\nmodule.exports = accommodationPriceList;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/js/app/src/price/accommodationPriceList.js\n ** module id = 11\n ** module chunks = 1\n **/","var _ = {};\r\n\r\n_.type = function (obj) {\r\n    return Object.prototype.toString.call(obj).replace(/\\[object\\s|\\]/g, '')\r\n};\r\n\r\n_.isArray = function isArray (list) {\r\n    return _.type(list) === 'Array'\r\n};\r\n\r\n_.isString = function isString (list) {\r\n    return _.type(list) === 'String'\r\n};\r\n\r\n_.each = function each (array, fn) {\r\n    for (var i = 0, len = array.length; i < len; i++) {\r\n        fn(array[i], i)\r\n    }\r\n};\r\n\r\n_.toArray = function toArray (listLike) {\r\n    if (!listLike) {\r\n        return []\r\n    }\r\n\r\n    var list = [];\r\n\r\n    for (var i = 0, len = listLike.length; i < len; i++) {\r\n        list.push(listLike[i])\r\n    }\r\n\r\n    return list\r\n};\r\n\r\n_.setAttr = function setAttr (node, key, value) {\r\n    switch (key) {\r\n        case 'style':\r\n            node.style.cssText = value;\r\n            break;\r\n        case 'value':\r\n            var tagName = node.tagName || '';\r\n            tagName = tagName.toLowerCase();\r\n            if (\r\n                tagName === 'input' || tagName === 'textarea'\r\n            ) {\r\n                node.value = value\r\n            } else {\r\n                // if it is not a input or textarea, use `setAttribute` to set\r\n                node.setAttribute(key, value)\r\n            }\r\n            break;\r\n        default:\r\n            node.setAttribute(key, value);\r\n            break\r\n    }\r\n};\r\nfunction Element (tagName, props, children) {\r\n    if (!(this instanceof Element)) {\r\n        return new Element(tagName, props, children)\r\n    }\r\n\r\n    if (_.isArray(props)) {\r\n        children = props;\r\n        props = {}\r\n    }\r\n\r\n    this.tagName = tagName;\r\n    this.props = props || {};\r\n    this.children = children || [];\r\n    this.key = props\r\n        ? props.key\r\n        : void 666;\r\n\r\n    var count = 0;\r\n\r\n    _.each(this.children, function (child, i) {\r\n        if (child instanceof Element) {\r\n            count += child.count\r\n        } else {\r\n            children[i] = '' + child\r\n        }\r\n        count++\r\n    });\r\n\r\n    this.count = count\r\n}\r\n\r\n/**\r\n * Render the hold element tree.\r\n */\r\nElement.prototype.render = function () {\r\n    var el = document.createElement(this.tagName);\r\n    var props = this.props;\r\n\r\n    for (var propName in props) {\r\n        var propValue = props[propName];\r\n        _.setAttr(el, propName, propValue)\r\n    }\r\n\r\n    _.each(this.children, function (child) {\r\n        var childEl = (child instanceof Element)\r\n            ? child.render()\r\n            : document.createTextNode(child);\r\n        el.appendChild(childEl)\r\n    });\r\n\r\n    return el\r\n};\r\nfunction listDiff (oldList, newList, key) {\r\n    var oldMap = makeKeyIndexAndFree(oldList, key);\r\n    var newMap = makeKeyIndexAndFree(newList, key);\r\n\r\n    var newFree = newMap.free;\r\n\r\n    var oldKeyIndex = oldMap.keyIndex;\r\n    var newKeyIndex = newMap.keyIndex;\r\n\r\n    var moves = [];\r\n\r\n    // a simulate list to manipulate\r\n    var children = [];\r\n    var i = 0;\r\n    var item;\r\n    var itemKey;\r\n    var freeIndex = 0;\r\n\r\n    // fist pass to check item in old list: if it's removed or not\r\n    while (i < oldList.length) {\r\n        item = oldList[i];\r\n        itemKey = getItemKey(item, key);\r\n        if (itemKey) {\r\n            if (!newKeyIndex.hasOwnProperty(itemKey)) {\r\n                children.push(null)\r\n            } else {\r\n                var newItemIndex = newKeyIndex[itemKey];\r\n                children.push(newList[newItemIndex])\r\n            }\r\n        } else {\r\n            var freeItem = newFree[freeIndex++];\r\n            children.push(freeItem || null)\r\n        }\r\n        i++\r\n    }\r\n\r\n    var simulateList = children.slice(0);\r\n\r\n    // remove items no longer exist\r\n    i = 0;\r\n    while (i < simulateList.length) {\r\n        if (simulateList[i] === null) {\r\n            remove(i);\r\n            removeSimulate(i)\r\n        } else {\r\n            i++\r\n        }\r\n    }\r\n\r\n    // i is cursor pointing to a item in new list\r\n    // j is cursor pointing to a item in simulateList\r\n    var j = i = 0;\r\n    while (i < newList.length) {\r\n        item = newList[i];\r\n        itemKey = getItemKey(item, key);\r\n\r\n        var simulateItem = simulateList[j];\r\n        var simulateItemKey = getItemKey(simulateItem, key);\r\n\r\n        if (simulateItem) {\r\n            if (itemKey === simulateItemKey) {\r\n                j++\r\n            } else {\r\n                // new item, just inesrt it\r\n                if (!oldKeyIndex.hasOwnProperty(itemKey)) {\r\n                    insert(i, item)\r\n                } else {\r\n                    // if remove current simulateItem make item in right place\r\n                    // then just remove it\r\n                    var nextItemKey = getItemKey(simulateList[j + 1], key);\r\n                    if (nextItemKey === itemKey) {\r\n                        remove(i);\r\n                        removeSimulate(j);\r\n                        j++;// after removing, current j is right, just jump to next one\r\n                    } else {\r\n                        // else insert item\r\n                        insert(i, item)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            insert(i, item)\r\n        }\r\n\r\n        i++\r\n    }\r\n\r\n    function remove (index) {\r\n        var move = {index: index, type: 0};\r\n        moves.push(move)\r\n    }\r\n\r\n    function insert (index, item) {\r\n        var move = {index: index, item: item, type: 1};\r\n        moves.push(move)\r\n    }\r\n\r\n    function removeSimulate (index) {\r\n        simulateList.splice(index, 1)\r\n    }\r\n\r\n    return {\r\n        moves: moves,\r\n        children: children\r\n    }\r\n}\r\n\r\n/**\r\n * Convert list to key-item keyIndex object.\r\n * @param {Array} list\r\n * @param {String|Function} key\r\n */\r\nfunction makeKeyIndexAndFree (list, key) {\r\n    var keyIndex = {};\r\n    var free = [];\r\n    for (var i = 0, len = list.length; i < len; i++) {\r\n        var item = list[i];\r\n        var itemKey = getItemKey(item, key);\r\n        if (itemKey) {\r\n            keyIndex[itemKey] = i\r\n        } else {\r\n            free.push(item)\r\n        }\r\n    }\r\n    return {\r\n        keyIndex: keyIndex,\r\n        free: free\r\n    }\r\n}\r\n\r\nfunction getItemKey (item, key) {\r\n    if (!item || !key) return void 666;\r\n    return typeof key === 'string'\r\n        ? item[key]\r\n        : key(item)\r\n}\r\nfunction diff (oldTree, newTree) {\r\n    var index = 0;\r\n    var patches = {};\r\n    dfsWalk(oldTree, newTree, index, patches);\r\n    return patches\r\n}\r\n\r\nfunction dfsWalk (oldNode, newNode, index, patches) {\r\n    var currentPatch = [];\r\n\r\n    // node is removed\r\n    if (newNode === null) {\r\n        // will be removed when perform reordering, so has no needs to do anthings in here\r\n        // textNode content replacing\r\n    } else if (_.isString(oldNode) && _.isString(newNode)) {\r\n        if (newNode !== oldNode) {\r\n            currentPatch.push({ type: patch.TEXT, content: newNode })\r\n        }\r\n        // nodes are the same, diff its props and children\r\n    } else if (\r\n        oldNode.tagName === newNode.tagName &&\r\n        oldNode.key === newNode.key\r\n    ) {\r\n        // diff props\r\n        var propsPatches = diffProps(oldNode, newNode);\r\n        if (propsPatches) {\r\n            currentPatch.push({ type: patch.PROPS, props: propsPatches })\r\n        }\r\n        // diff children\r\n        diffChildren(oldNode.children, newNode.children, index, patches, currentPatch);\r\n        // nodes are not the same, replace the old node with new node\r\n    } else {\r\n        currentPatch.push({ type: patch.REPLACE, node: newNode })\r\n    }\r\n\r\n    if (currentPatch.length) {\r\n        patches[index] = currentPatch\r\n    }\r\n}\r\n\r\nfunction diffChildren (oldChildren, newChildren, index, patches, currentPatch) {\r\n    var diffs = listDiff(oldChildren, newChildren, 'key');\r\n    newChildren = diffs.children;\r\n\r\n    if (diffs.moves.length) {\r\n        var reorderPatch = { type: patch.REORDER, moves: diffs.moves };\r\n        currentPatch.push(reorderPatch)\r\n    }\r\n\r\n    var leftNode = null;\r\n    var currentNodeIndex = index;\r\n    _.each(oldChildren, function (child, i) {\r\n        var newChild = newChildren[i];\r\n        currentNodeIndex = (leftNode && leftNode.count)\r\n            ? currentNodeIndex + leftNode.count + 1\r\n            : currentNodeIndex + 1;\r\n        dfsWalk(child, newChild, currentNodeIndex, patches);\r\n        leftNode = child\r\n    })\r\n}\r\n\r\nfunction diffProps (oldNode, newNode) {\r\n    var count = 0;\r\n    var oldProps = oldNode.props;\r\n    var newProps = newNode.props;\r\n\r\n    var key, value;\r\n    var propsPatches = {};\r\n\r\n    // find out different properties\r\n    for (key in oldProps) {\r\n        value = oldProps[key];\r\n        if (newProps[key] !== value) {\r\n            count++;\r\n            propsPatches[key] = newProps[key];\r\n        }\r\n    }\r\n\r\n    // find out new property\r\n    for (key in newProps) {\r\n        value = newProps[key];\r\n        if (!oldProps.hasOwnProperty(key)) {\r\n            count++;\r\n            propsPatches[key] = newProps[key];\r\n        }\r\n    }\r\n\r\n    // if properties all are identical\r\n    if (count === 0) {\r\n        return null\r\n    }\r\n\r\n    return propsPatches\r\n}\r\n\r\nvar REPLACE = 0;\r\nvar REORDER = 1;\r\nvar PROPS = 2;\r\nvar TEXT = 3;\r\n\r\nfunction patch (node, patches) {\r\n    var walker = {index: 0};\r\n    dfsWalkp(node, walker, patches)\r\n}\r\n\r\nfunction dfsWalkp (node, walker, patches) {\r\n    var currentPatches = patches[walker.index];\r\n\r\n    var len = node.childNodes\r\n        ? node.childNodes.length\r\n        : 0;\r\n    for (var i = 0; i < len; i++) {\r\n        var child = node.childNodes[i];\r\n        walker.index++;\r\n        dfsWalkp(child, walker, patches)\r\n    }\r\n\r\n    if (currentPatches) {\r\n        applyPatches(node, currentPatches)\r\n    }\r\n}\r\n\r\nfunction applyPatches (node, currentPatches) {\r\n    _.each(currentPatches, function (currentPatch) {\r\n        switch (currentPatch.type) {\r\n            case REPLACE:\r\n                node.parentNode.replaceChild(currentPatch.node.render(), node);\r\n                break;\r\n            case REORDER:\r\n                reorderChildren(node, currentPatch.moves);\r\n                break;\r\n            case PROPS:\r\n                setProps(node, currentPatch.props);\r\n                break;\r\n            case TEXT:\r\n                if (node.textContent) {\r\n                    node.textContent = currentPatch.content\r\n                } else {\r\n                    // fuck ie\r\n                    node.nodeValue = currentPatch.content\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('Unknown patch type ' + currentPatch.type)\r\n        }\r\n    })\r\n}\r\n\r\nfunction setProps (node, props) {\r\n    for (var key in props) {\r\n        if (props[key] === void 666) {\r\n            node.removeAttribute(key)\r\n        } else {\r\n            var value = props[key];\r\n            _.setAttr(node, key, value)\r\n        }\r\n    }\r\n}\r\n\r\nfunction reorderChildren (node, moves) {\r\n    var staticNodeList = _.toArray(node.childNodes);\r\n    var maps = {};\r\n\r\n    _.each(staticNodeList, function (node) {\r\n        if (node.nodeType === 1) {\r\n            var key = node.getAttribute('key');\r\n            if (key) {\r\n                maps[key] = node\r\n            }\r\n        }\r\n    });\r\n\r\n    _.each(moves, function (move) {\r\n        var index = move.index;\r\n        if (move.type === 0) { // remove item\r\n            if (staticNodeList[index] === node.childNodes[index]) { // maybe have been removed for inserting\r\n                node.removeChild(node.childNodes[index])\r\n            }\r\n            staticNodeList.splice(index, 1)\r\n        } else if (move.type === 1) { // insert item\r\n            var insertNode = maps[move.item.key]\r\n                ? maps[move.item.key] // reuse old item\r\n                : (typeof move.item === 'object')\r\n                ? move.item.render()\r\n                : document.createTextNode(move.item);\r\n            staticNodeList.splice(index, 0, insertNode);\r\n            node.insertBefore(insertNode, node.childNodes[index] || null)\r\n        }\r\n    })\r\n}\r\n\r\npatch.REPLACE = REPLACE;\r\npatch.REORDER = REORDER;\r\npatch.PROPS = PROPS;\r\npatch.TEXT = TEXT;\r\n\r\nvar virtualDOM = {\r\n    patch: patch,\r\n    diff: diff,\r\n    El: Element\r\n};\r\n\r\nmodule.exports = virtualDOM;\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./static/js/app/src/common/virtualDOM.js\n ** module id = 12\n ** module chunks = 1\n **/"],"sourceRoot":""}